/* tslint:disable */
/* eslint-disable */
/**
 * sctgdesk-api-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { AbGetResponse } from '../models';
import { AbPeer } from '../models';
import { AbPeersResponse } from '../models';
import { AbPersonal } from '../models';
import { AbSettingsResponse } from '../models';
import { AbSharedProfilesResponse } from '../models';
import { AbTag } from '../models';
import { AbTagRenameRequest } from '../models';
/**
 * AddressBookApi - axios parameter creator
 * @export
 */
export const AddressBookApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerAdd: async (body: AbPeer, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerAdd.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerAdd.');
            }
            const localVarPath = `/api/ab/peer/add/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerDelete: async (body: Array<string>, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerDelete.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerDelete.');
            }
            const localVarPath = `/api/ab/peer/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeerUpdate: async (body: AbPeer, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abPeerUpdate.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeerUpdate.');
            }
            const localVarPath = `/api/ab/peer/update/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * List peers
         * @param {number} current 
         * @param {number} pageSize 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPeers: async (current: number, pageSize: number, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'current' is not null or undefined
            if (current === null || current === undefined) {
                throw new RequiredError('current','Required parameter current was null or undefined when calling abPeers.');
            }
            // verify required parameter 'pageSize' is not null or undefined
            if (pageSize === null || pageSize === undefined) {
                throw new RequiredError('pageSize','Required parameter pageSize was null or undefined when calling abPeers.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abPeers.');
            }
            const localVarPath = `/api/ab/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (ab !== undefined) {
                localVarQueryParameter['ab'] = ab;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPersonal: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/personal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the user's address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/get`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abSettings: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/settings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Shared profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abShared: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ab/shared/profiles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Add a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagAdd: async (body: AbTag, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagAdd.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagAdd.');
            }
            const localVarPath = `/api/ab/tag/add/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagDelete: async (body: Array<string>, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagDelete.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagDelete.');
            }
            const localVarPath = `/api/ab/tag/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Rename a tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagRename: async (body: AbTagRenameRequest, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagRename.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagRename.');
            }
            const localVarPath = `/api/ab/tag/rename/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTagUpdate: async (body: AbTag, ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling abTagUpdate.');
            }
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTagUpdate.');
            }
            const localVarPath = `/api/ab/tag/update/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        abTags: async (ab: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ab' is not null or undefined
            if (ab === null || ab === undefined) {
                throw new RequiredError('ab','Required parameter ab was null or undefined when calling abTags.');
            }
            const localVarPath = `/api/ab/tags/{ab}`
                .replace(`{${"ab"}}`, encodeURIComponent(String(ab)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressBookApi - functional programming interface
 * @export
 */
export const AddressBookApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerAdd(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerDelete(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeerUpdate(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List peers
         * @param {number} current 
         * @param {number} pageSize 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeers(current: number, pageSize: number, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbPeersResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPeers(current, pageSize, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPersonal(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbPersonal>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPersonal(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the user's address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbGetResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSettings(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbSettingsResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abSettings(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Shared profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abShared(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<AbSharedProfilesResponse>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abShared(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Add a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagAdd(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagDelete(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rename a tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagRename(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTagUpdate(body, ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTags(ab: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<AbTag>>>> {
            const localVarAxiosArgs = await AddressBookApiAxiosParamCreator(configuration).abTags(ab, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AddressBookApi - factory interface
 * @export
 */
export const AddressBookApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerAdd(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete peer
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerDelete(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Update peer
         * @param {AbPeer} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abPeerUpdate(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * List peers
         * @param {number} current 
         * @param {number} pageSize 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPeers(current: number, pageSize: number, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<AbPeersResponse>> {
            return AddressBookApiFp(configuration).abPeers(current, pageSize, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPersonal(options?: AxiosRequestConfig): Promise<AxiosResponse<AbPersonal>> {
            return AddressBookApiFp(configuration).abPersonal(options).then((request) => request(axios, basePath));
        },
        /**
         * Get the user's address book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abPost(options?: AxiosRequestConfig): Promise<AxiosResponse<AbGetResponse>> {
            return AddressBookApiFp(configuration).abPost(options).then((request) => request(axios, basePath));
        },
        /**
         * Settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abSettings(options?: AxiosRequestConfig): Promise<AxiosResponse<AbSettingsResponse>> {
            return AddressBookApiFp(configuration).abSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Shared profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abShared(options?: AxiosRequestConfig): Promise<AxiosResponse<AbSharedProfilesResponse>> {
            return AddressBookApiFp(configuration).abShared(options).then((request) => request(axios, basePath));
        },
        /**
         * Add a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagAdd(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a tag
         * @param {Array<string>} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagDelete(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Rename a tag
         * @param {AbTagRenameRequest} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagRename(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tag
         * @param {AbTag} body 
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return AddressBookApiFp(configuration).abTagUpdate(body, ab, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the tags
         * @param {string} ab 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async abTags(ab: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<AbTag>>> {
            return AddressBookApiFp(configuration).abTags(ab, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AddressBookApi - object-oriented interface
 * @export
 * @class AddressBookApi
 * @extends {BaseAPI}
 */
export class AddressBookApi extends BaseAPI {
    /**
     * Add peer
     * @param {AbPeer} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerAdd(body: AbPeer, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerAdd(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete peer
     * @param {Array<string>} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerDelete(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update peer
     * @param {AbPeer} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeerUpdate(body: AbPeer, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abPeerUpdate(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * List peers
     * @param {number} current 
     * @param {number} pageSize 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPeers(current: number, pageSize: number, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<AbPeersResponse>> {
        return AddressBookApiFp(this.configuration).abPeers(current, pageSize, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Address book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPersonal(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbPersonal>> {
        return AddressBookApiFp(this.configuration).abPersonal(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the user's address book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbGetResponse>> {
        return AddressBookApiFp(this.configuration).abPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abSettings(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbSettingsResponse>> {
        return AddressBookApiFp(this.configuration).abSettings(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Shared profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abShared(options?: AxiosRequestConfig) : Promise<AxiosResponse<AbSharedProfilesResponse>> {
        return AddressBookApiFp(this.configuration).abShared(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Add a tag
     * @param {AbTag} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagAdd(body: AbTag, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagAdd(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Delete a tag
     * @param {Array<string>} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagDelete(body: Array<string>, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagDelete(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Rename a tag
     * @param {AbTagRenameRequest} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagRename(body: AbTagRenameRequest, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagRename(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a tag
     * @param {AbTag} body 
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTagUpdate(body: AbTag, ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return AddressBookApiFp(this.configuration).abTagUpdate(body, ab, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the tags
     * @param {string} ab 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressBookApi
     */
    public async abTags(ab: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<AbTag>>> {
        return AddressBookApiFp(this.configuration).abTags(ab, options).then((request) => request(this.axios, this.basePath));
    }
}
