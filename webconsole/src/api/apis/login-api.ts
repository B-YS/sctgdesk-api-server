/* tslint:disable */
/* eslint-disable */
/**
 * sctgdesk-api-server
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CurrentUserRequest } from '../models';
import { LoginReply } from '../models';
import { LoginRequest } from '../models';
import { LogoutReply } from '../models';
import { OidcAuthRequest } from '../models';
import { OidcAuthUrl } from '../models';
import { OidcResponse } from '../models';
/**
 * LoginApi - axios parameter creator
 * @export
 */
export const LoginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This function is an API endpoint that allows a user to log in without oauth. It is tagged with \"login\" for OpenAPI documentation. <br>  ## Parameters  - `request`: The request data, which includes the user's username and password.  <br>  ## Returns  If successful, this function returns a `Json<LoginReply>` object, which includes the user's information and access token.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized or if the system is in maintenance mode.
         * @summary User Login
         * @param {LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (body: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling login.');
            }
            const localVarPath = `/api/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This is called by the client for knowing the Oauth2 provider(s) available You must provide a list of Oauth2 providers in the `oauth2.toml` config file The config file can be overridden by the `OAUTH2_CONFIG_FILE` environment variable  This function is an API endpoint that is called by the client to get the list of available OAuth2 providers. The list of providers is defined in the `oauth2.toml` config file, which can be overridden by the `OAUTH2_CONFIG_FILE` environment variable. It is tagged with \"login\" for OpenAPI documentation.  ## Limitations  It needs to be completed for mapping the username and email from the OAuth2 provider to the SCTGDesk user.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<Vec<String>>` object, which includes the list of available OAuth2 providers.  <br> If the config file is not found or cannot be read, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the config file is not found or cannot be read.  # Example  GET /api/login-options
         * @summary Login Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginOptions: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/login-options`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that allows an authenticated user to log out. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the current user information.  <br>  ## Returns  If successful, this function returns a `Json<LogoutReply>` object, which includes a success message.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized.
         * @summary Log the User Out
         * @param {CurrentUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (body: CurrentUserRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling logout.');
            }
            const localVarPath = `/api/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication authorization required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken()
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * OIDC Auth request  This entrypoint is called by the client for getting the authorization url for the Oauth2 provider he chooses  For testing you can generate a valid uuid field with the following command: `uuidgen | base64` # OIDC Auth Request  This function is an API endpoint that is called by the client to get the authorization URL for the chosen OAuth2 provider. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the chosen OAuth2 provider and a UUID.  <br> For testing you can generate a valid uuid field with the following command: `uuidgen | base64`  ## Returns  If successful, this function returns a `Json<OidcAuthUrl>` object, which includes the authorization URL and a session code.  <br> If the UUID is invalid or the OAuth2 provider is not found, this function returns an `OidcAuthUrl` object with an empty URL and an error code.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the UUID is invalid or the OAuth2 provider is not found.  # Example  POST /api/oidc/auth { \"op\": \"github\", \"uuid\": \"generated_uuid_base64_encoded\" }
         * @param {OidcAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oidcAuth: async (body: OidcAuthRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling oidcAuth.');
            }
            const localVarPath = `/api/oidc/auth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that serves as the OAuth2 callback. It exchanges the authorization code for an access token and stores it in the state. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `state`: The state parameter received from the OIDC provider. This is the session code.  ## Returns  If successful, this function returns \"OK\".  <br> If the session does not exist or the code exchange fails, this function returns \"ERROR\".  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist or the code exchange fails.  # Example  GET /api/oidc/callback?code=authorization_code&state=session_code
         * @summary OIDC Auth Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oidcCallback: async (code: string, state: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling oidcCallback.');
            }
            // verify required parameter 'state' is not null or undefined
            if (state === null || state === undefined) {
                throw new RequiredError('state','Required parameter state was null or undefined when calling oidcCallback.');
            }
            const localVarPath = `/api/oidc/callback`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This function is an API endpoint that checks the state of an OpenID Connect (OIDC) session. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `id`: The identifier of the OIDC session.  - `uuid`: The UUID of the OIDC session.  ## Returns  If successful, this function returns a `Json<Option<OidcResponse>>` object.  <br> If the session does not exist, this function returns `Json(None)`.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist.  # Example  GET /api/oidc/auth-query?code=authorization_code&id=session_id&uuid=session_uuid
         * @summary OIDC State
         * @param {string} code 
         * @param {string} id 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        oidcState: async (code: string, id: string, uuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling oidcState.');
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling oidcState.');
            }
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling oidcState.');
            }
            const localVarPath = `/api/oidc/auth-query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (code !== undefined) {
                localVarQueryParameter['code'] = code;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LoginApi - functional programming interface
 * @export
 */
export const LoginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This function is an API endpoint that allows a user to log in without oauth. It is tagged with \"login\" for OpenAPI documentation. <br>  ## Parameters  - `request`: The request data, which includes the user's username and password.  <br>  ## Returns  If successful, this function returns a `Json<LoginReply>` object, which includes the user's information and access token.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized or if the system is in maintenance mode.
         * @summary User Login
         * @param {LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(body: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LoginReply>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).login(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This is called by the client for knowing the Oauth2 provider(s) available You must provide a list of Oauth2 providers in the `oauth2.toml` config file The config file can be overridden by the `OAUTH2_CONFIG_FILE` environment variable  This function is an API endpoint that is called by the client to get the list of available OAuth2 providers. The list of providers is defined in the `oauth2.toml` config file, which can be overridden by the `OAUTH2_CONFIG_FILE` environment variable. It is tagged with \"login\" for OpenAPI documentation.  ## Limitations  It needs to be completed for mapping the username and email from the OAuth2 provider to the SCTGDesk user.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<Vec<String>>` object, which includes the list of available OAuth2 providers.  <br> If the config file is not found or cannot be read, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the config file is not found or cannot be read.  # Example  GET /api/login-options
         * @summary Login Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOptions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).loginOptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that allows an authenticated user to log out. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the current user information.  <br>  ## Returns  If successful, this function returns a `Json<LogoutReply>` object, which includes a success message.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized.
         * @summary Log the User Out
         * @param {CurrentUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(body: CurrentUserRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<LogoutReply>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).logout(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * OIDC Auth request  This entrypoint is called by the client for getting the authorization url for the Oauth2 provider he chooses  For testing you can generate a valid uuid field with the following command: `uuidgen | base64` # OIDC Auth Request  This function is an API endpoint that is called by the client to get the authorization URL for the chosen OAuth2 provider. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the chosen OAuth2 provider and a UUID.  <br> For testing you can generate a valid uuid field with the following command: `uuidgen | base64`  ## Returns  If successful, this function returns a `Json<OidcAuthUrl>` object, which includes the authorization URL and a session code.  <br> If the UUID is invalid or the OAuth2 provider is not found, this function returns an `OidcAuthUrl` object with an empty URL and an error code.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the UUID is invalid or the OAuth2 provider is not found.  # Example  POST /api/oidc/auth { \"op\": \"github\", \"uuid\": \"generated_uuid_base64_encoded\" }
         * @param {OidcAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcAuth(body: OidcAuthRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OidcAuthUrl>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).oidcAuth(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that serves as the OAuth2 callback. It exchanges the authorization code for an access token and stores it in the state. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `state`: The state parameter received from the OIDC provider. This is the session code.  ## Returns  If successful, this function returns \"OK\".  <br> If the session does not exist or the code exchange fails, this function returns \"ERROR\".  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist or the code exchange fails.  # Example  GET /api/oidc/callback?code=authorization_code&state=session_code
         * @summary OIDC Auth Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcCallback(code: string, state: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).oidcCallback(code, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This function is an API endpoint that checks the state of an OpenID Connect (OIDC) session. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `id`: The identifier of the OIDC session.  - `uuid`: The UUID of the OIDC session.  ## Returns  If successful, this function returns a `Json<Option<OidcResponse>>` object.  <br> If the session does not exist, this function returns `Json(None)`.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist.  # Example  GET /api/oidc/auth-query?code=authorization_code&id=session_id&uuid=session_uuid
         * @summary OIDC State
         * @param {string} code 
         * @param {string} id 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcState(code: string, id: string, uuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<OidcResponse>>> {
            const localVarAxiosArgs = await LoginApiAxiosParamCreator(configuration).oidcState(code, id, uuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * LoginApi - factory interface
 * @export
 */
export const LoginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This function is an API endpoint that allows a user to log in without oauth. It is tagged with \"login\" for OpenAPI documentation. <br>  ## Parameters  - `request`: The request data, which includes the user's username and password.  <br>  ## Returns  If successful, this function returns a `Json<LoginReply>` object, which includes the user's information and access token.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized or if the system is in maintenance mode.
         * @summary User Login
         * @param {LoginRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(body: LoginRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<LoginReply>> {
            return LoginApiFp(configuration).login(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This is called by the client for knowing the Oauth2 provider(s) available You must provide a list of Oauth2 providers in the `oauth2.toml` config file The config file can be overridden by the `OAUTH2_CONFIG_FILE` environment variable  This function is an API endpoint that is called by the client to get the list of available OAuth2 providers. The list of providers is defined in the `oauth2.toml` config file, which can be overridden by the `OAUTH2_CONFIG_FILE` environment variable. It is tagged with \"login\" for OpenAPI documentation.  ## Limitations  It needs to be completed for mapping the username and email from the OAuth2 provider to the SCTGDesk user.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<Vec<String>>` object, which includes the list of available OAuth2 providers.  <br> If the config file is not found or cannot be read, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the config file is not found or cannot be read.  # Example  GET /api/login-options
         * @summary Login Options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async loginOptions(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return LoginApiFp(configuration).loginOptions(options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that allows an authenticated user to log out. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the current user information.  <br>  ## Returns  If successful, this function returns a `Json<LogoutReply>` object, which includes a success message.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized.
         * @summary Log the User Out
         * @param {CurrentUserRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(body: CurrentUserRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<LogoutReply>> {
            return LoginApiFp(configuration).logout(body, options).then((request) => request(axios, basePath));
        },
        /**
         * OIDC Auth request  This entrypoint is called by the client for getting the authorization url for the Oauth2 provider he chooses  For testing you can generate a valid uuid field with the following command: `uuidgen | base64` # OIDC Auth Request  This function is an API endpoint that is called by the client to get the authorization URL for the chosen OAuth2 provider. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the chosen OAuth2 provider and a UUID.  <br> For testing you can generate a valid uuid field with the following command: `uuidgen | base64`  ## Returns  If successful, this function returns a `Json<OidcAuthUrl>` object, which includes the authorization URL and a session code.  <br> If the UUID is invalid or the OAuth2 provider is not found, this function returns an `OidcAuthUrl` object with an empty URL and an error code.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the UUID is invalid or the OAuth2 provider is not found.  # Example  POST /api/oidc/auth { \"op\": \"github\", \"uuid\": \"generated_uuid_base64_encoded\" }
         * @param {OidcAuthRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcAuth(body: OidcAuthRequest, options?: AxiosRequestConfig): Promise<AxiosResponse<OidcAuthUrl>> {
            return LoginApiFp(configuration).oidcAuth(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that serves as the OAuth2 callback. It exchanges the authorization code for an access token and stores it in the state. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `state`: The state parameter received from the OIDC provider. This is the session code.  ## Returns  If successful, this function returns \"OK\".  <br> If the session does not exist or the code exchange fails, this function returns \"ERROR\".  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist or the code exchange fails.  # Example  GET /api/oidc/callback?code=authorization_code&state=session_code
         * @summary OIDC Auth Callback
         * @param {string} code 
         * @param {string} state 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcCallback(code: string, state: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return LoginApiFp(configuration).oidcCallback(code, state, options).then((request) => request(axios, basePath));
        },
        /**
         * This function is an API endpoint that checks the state of an OpenID Connect (OIDC) session. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `id`: The identifier of the OIDC session.  - `uuid`: The UUID of the OIDC session.  ## Returns  If successful, this function returns a `Json<Option<OidcResponse>>` object.  <br> If the session does not exist, this function returns `Json(None)`.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist.  # Example  GET /api/oidc/auth-query?code=authorization_code&id=session_id&uuid=session_uuid
         * @summary OIDC State
         * @param {string} code 
         * @param {string} id 
         * @param {string} uuid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async oidcState(code: string, id: string, uuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<OidcResponse>> {
            return LoginApiFp(configuration).oidcState(code, id, uuid, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LoginApi - object-oriented interface
 * @export
 * @class LoginApi
 * @extends {BaseAPI}
 */
export class LoginApi extends BaseAPI {
    /**
     * This function is an API endpoint that allows a user to log in without oauth. It is tagged with \"login\" for OpenAPI documentation. <br>  ## Parameters  - `request`: The request data, which includes the user's username and password.  <br>  ## Returns  If successful, this function returns a `Json<LoginReply>` object, which includes the user's information and access token.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the user is not authorized or if the system is in maintenance mode.
     * @summary User Login
     * @param {LoginRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async login(body: LoginRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<LoginReply>> {
        return LoginApiFp(this.configuration).login(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This is called by the client for knowing the Oauth2 provider(s) available You must provide a list of Oauth2 providers in the `oauth2.toml` config file The config file can be overridden by the `OAUTH2_CONFIG_FILE` environment variable  This function is an API endpoint that is called by the client to get the list of available OAuth2 providers. The list of providers is defined in the `oauth2.toml` config file, which can be overridden by the `OAUTH2_CONFIG_FILE` environment variable. It is tagged with \"login\" for OpenAPI documentation.  ## Limitations  It needs to be completed for mapping the username and email from the OAuth2 provider to the SCTGDesk user.  ## Parameters  - none  ## Returns  If successful, this function returns a `Json<Vec<String>>` object, which includes the list of available OAuth2 providers.  <br> If the config file is not found or cannot be read, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the config file is not found or cannot be read.  # Example  GET /api/login-options
     * @summary Login Options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async loginOptions(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return LoginApiFp(this.configuration).loginOptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that allows an authenticated user to log out. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the current user information.  <br>  ## Returns  If successful, this function returns a `Json<LogoutReply>` object, which includes a success message.  <br> If the user is not authorized, this function returns a `status::Unauthorized` error.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the user is not authorized.
     * @summary Log the User Out
     * @param {CurrentUserRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async logout(body: CurrentUserRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<LogoutReply>> {
        return LoginApiFp(this.configuration).logout(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * OIDC Auth request  This entrypoint is called by the client for getting the authorization url for the Oauth2 provider he chooses  For testing you can generate a valid uuid field with the following command: `uuidgen | base64` # OIDC Auth Request  This function is an API endpoint that is called by the client to get the authorization URL for the chosen OAuth2 provider. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `request`: The request data, which includes the chosen OAuth2 provider and a UUID.  <br> For testing you can generate a valid uuid field with the following command: `uuidgen | base64`  ## Returns  If successful, this function returns a `Json<OidcAuthUrl>` object, which includes the authorization URL and a session code.  <br> If the UUID is invalid or the OAuth2 provider is not found, this function returns an `OidcAuthUrl` object with an empty URL and an error code.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the UUID is invalid or the OAuth2 provider is not found.  # Example  POST /api/oidc/auth { \"op\": \"github\", \"uuid\": \"generated_uuid_base64_encoded\" }
     * @param {OidcAuthRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async oidcAuth(body: OidcAuthRequest, options?: AxiosRequestConfig) : Promise<AxiosResponse<OidcAuthUrl>> {
        return LoginApiFp(this.configuration).oidcAuth(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that serves as the OAuth2 callback. It exchanges the authorization code for an access token and stores it in the state. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `state`: The state parameter received from the OIDC provider. This is the session code.  ## Returns  If successful, this function returns \"OK\".  <br> If the session does not exist or the code exchange fails, this function returns \"ERROR\".  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist or the code exchange fails.  # Example  GET /api/oidc/callback?code=authorization_code&state=session_code
     * @summary OIDC Auth Callback
     * @param {string} code 
     * @param {string} state 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async oidcCallback(code: string, state: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return LoginApiFp(this.configuration).oidcCallback(code, state, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This function is an API endpoint that checks the state of an OpenID Connect (OIDC) session. It is tagged with \"login\" for OpenAPI documentation.  ## Parameters  - `code`: The authorization code received from the OIDC provider.  - `id`: The identifier of the OIDC session.  - `uuid`: The UUID of the OIDC session.  ## Returns  If successful, this function returns a `Json<Option<OidcResponse>>` object.  <br> If the session does not exist, this function returns `Json(None)`.  <br>  ## Errors  This function will return an error if the system is in maintenance mode, or if the session does not exist.  # Example  GET /api/oidc/auth-query?code=authorization_code&id=session_id&uuid=session_uuid
     * @summary OIDC State
     * @param {string} code 
     * @param {string} id 
     * @param {string} uuid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoginApi
     */
    public async oidcState(code: string, id: string, uuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<OidcResponse>> {
        return LoginApiFp(this.configuration).oidcState(code, id, uuid, options).then((request) => request(this.axios, this.basePath));
    }
}
